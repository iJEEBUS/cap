{"ast":null,"code":"import _classCallCheck from \"/Users/jeannettehigh/aihpi/frontend/gui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeannettehigh/aihpi/frontend/gui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeannettehigh/aihpi/frontend/gui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeannettehigh/aihpi/frontend/gui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeannettehigh/aihpi/frontend/gui/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeannettehigh/aihpi/frontend/gui/src/components/GamePlay.js\";\nimport React, { Component } from 'react';\nimport Timer from './Timer';\nimport AnswerType from './AnswerType';\nimport Progress from './Progress';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-regular-svg-icons';\nimport '../styling/GamePlay.css';\nimport HealthForm from './HealthForm';\n\nvar GamePlay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GamePlay, _Component);\n\n  function GamePlay(props) {\n    var _this;\n\n    _classCallCheck(this, GamePlay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GamePlay).call(this, props));\n\n    _this.answerQuestion = function (answer) {\n      var key = _this.state.current;\n      var current = _this.state.current + 1;\n\n      var changedItem = _this.state.questions.find(function (value) {\n        if (value.key === key) {\n          value.answered = true;\n          value.answer = answer;\n          return value;\n        }\n      });\n\n      var newQuestions = _this.state.questions.filter(function (value) {\n        if (value.key === key) {\n          return changedItem;\n        } else {\n          return value;\n        }\n      });\n\n      if (current < _this.state.questions.length) {\n        _this.setState({\n          showQuestion: !_this.state.showQuestion,\n          current: current,\n          questions: newQuestions\n        });\n      } else {\n        _this.state.finish(newQuestions);\n      }\n    };\n\n    _this.state = {\n      showQuestion: false,\n      questions: _this.props.questions,\n      current: 0,\n      isShowing: false,\n      finish: _this.props.openModal\n    };\n    return _this;\n  }\n\n  _createClass(GamePlay, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.state.questions;\n      var current = this.state.current;\n      var showQuestion = this.state.showQuestion;\n      var quit = this.props.quit;\n      var rounds = this.props.rouds;\n      return React.createElement(\"div\", {\n        className: this.state.isShowing ? \"back-drop\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        icon: faTimesCircle,\n        className: \"right\",\n        size: \"2x\",\n        onClick: quit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"GamePlay\"), React.createElement(Progress, {\n        questions: questions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"Game_data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(HealthForm, {\n        data: questions[current].data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), showQuestion ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Game_question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(AnswerType, {\n        question: questions[current].question,\n        type: questions[current].type,\n        wordbank: questions[current].wordbank,\n        answer: this.answerQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Timer, {\n        seconds: questions[current].time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"Game_conferm\",\n        onClick: function onClick() {\n          return _this2.answerQuestion();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Answer\")) : React.createElement(\"div\", {\n        className: \"Game_question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"Game_conferm\",\n        onClick: function onClick() {\n          return _this2.setState({\n            showQuestion: !showQuestion\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Ready\")));\n    }\n  }]);\n\n  return GamePlay;\n}(Component);\n\nexport default GamePlay;","map":{"version":3,"sources":["/Users/jeannettehigh/aihpi/frontend/gui/src/components/GamePlay.js"],"names":["React","Component","Timer","AnswerType","Progress","FontAwesomeIcon","faTimesCircle","HealthForm","GamePlay","props","answerQuestion","answer","key","state","current","changedItem","questions","find","value","answered","newQuestions","filter","length","setState","showQuestion","finish","isShowing","openModal","quit","rounds","rouds","data","question","type","wordbank","time"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Timer from './Timer'\nimport AnswerType from './AnswerType'\nimport Progress from './Progress'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimesCircle } from '@fortawesome/free-regular-svg-icons'\nimport '../styling/GamePlay.css'\nimport HealthForm from './HealthForm';\n\nclass GamePlay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showQuestion: false,\n            questions: this.props.questions,\n            current: 0,\n            isShowing: false,\n            finish: this.props.openModal\n        };\n    }\n    answerQuestion = (answer) => {\n        const key = this.state.current;\n        const current = this.state.current + 1;\n\n        const changedItem = this.state.questions.find(function (value) {\n            if (value.key === key) {\n                value.answered = true;\n                value.answer = answer;\n                return value;\n            }\n        });\n\n        const newQuestions = this.state.questions.filter(function (value) {\n            if (value.key === key) {\n                return changedItem;\n            } else {\n                return value;\n            }\n        });\n        if (current < this.state.questions.length) {\n            this.setState({\n                showQuestion: !this.state.showQuestion,\n                current: current,\n                questions: newQuestions\n            })\n        } else {\n            this.state.finish(newQuestions)\n        }\n    }\n    render() {\n        const questions = this.state.questions;\n        const current = this.state.current;\n        const showQuestion = this.state.showQuestion;\n        const quit = this.props.quit;\n        const rounds = this.props.rouds;\n        return (\n            <div className={this.state.isShowing ? \"back-drop\" : \"\"}>\n                <FontAwesomeIcon icon={faTimesCircle} className=\"right\" size={\"2x\"} onClick={quit} />\n                <h2>GamePlay</h2>\n                <Progress questions={questions} />\n                <div className=\"Game_data\">\n                    <HealthForm data={questions[current].data} />\n                </div>\n                {showQuestion ?\n                    <div>\n                        <div className=\"Game_question\">\n                            <AnswerType\n                                question={questions[current].question}\n                                type={questions[current].type}\n                                wordbank={questions[current].wordbank}\n                                answer={this.answerQuestion}\n                            />\n                            <Timer seconds={questions[current].time} />\n                        </div>\n                        <button className=\"Game_conferm\" onClick={() => this.answerQuestion()}>Answer</button>\n                    </div>\n                    :\n                    <div className=\"Game_question\">\n                        <button className=\"Game_conferm\" onClick={() => this.setState({ showQuestion: !showQuestion })}>Ready</button>\n                    </div>}\n            </div>\n        );\n    }\n}\n\nexport default GamePlay;"]},"metadata":{},"sourceType":"module"}